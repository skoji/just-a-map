name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.2.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: List available simulators
      run: xcrun simctl list devices
    
    - name: Create and boot iPhone simulator
      run: |
        # Try to find iPhone 16 first, fall back to other iPhone models
        echo "Searching for available iPhone simulators..."
        
        # List available runtimes
        echo "Available runtimes:"
        xcrun simctl list runtimes
        
        # Try different iPhone models in order of preference
        for DEVICE_TYPE in "iPhone 16" "iPhone 15" "iPhone 14" "iPhone 13"; do
          echo "Checking for $DEVICE_TYPE..."
          EXISTING_DEVICE=$(xcrun simctl list devices | grep "$DEVICE_TYPE" | grep -E "iOS 1[78]\." | head -1 | awk -F'[()]' '{print $2}')
          
          if [ -n "$EXISTING_DEVICE" ]; then
            echo "Found existing device: $DEVICE_TYPE with ID: $EXISTING_DEVICE"
            DEVICE_ID=$EXISTING_DEVICE
            break
          fi
        done
        
        # If no device found, try to create one
        if [ -z "$DEVICE_ID" ]; then
          echo "No existing device found, attempting to create one..."
          
          # Get the latest iOS runtime
          RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Try to create iPhone 15 (more likely to be available than iPhone 16)
          DEVICE_ID=$(xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "$RUNTIME" || \
                     xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "$RUNTIME" || \
                     echo "")
          
          if [ -z "$DEVICE_ID" ]; then
            echo "Failed to create device. Using generic destination."
            DEVICE_ID="placeholder"
          else
            echo "Created new device: $DEVICE_ID"
          fi
        fi
        
        # Boot the device if it's not a placeholder
        if [ "$DEVICE_ID" != "placeholder" ]; then
          xcrun simctl boot $DEVICE_ID || true
          
          # Wait for device to be ready
          xcrun simctl bootstatus $DEVICE_ID || true
        fi
        
        # Save device ID for later use
        echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
    
    - name: Build and test
      run: |
        # Set destination based on device availability
        if [ "$DEVICE_ID" = "placeholder" ]; then
          DESTINATION="platform=iOS Simulator,name=Any iOS Simulator Device"
        else
          DESTINATION="platform=iOS Simulator,id=$DEVICE_ID"
        fi
        
        echo "Using destination: $DESTINATION"
        
        xcodebuild test \
          -scheme JustAMapTests \
          -destination "$DESTINATION" \
          -resultBundlePath TestResults \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | bundle exec xcpretty --report junit --output test_results.xml
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1)
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1)
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed: $FAILURES failures, $ERRORS errors"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi