name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.1.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: List available simulators
      run: xcrun simctl list devices
    
    - name: Run tests
      run: |
        # Show available destinations for debugging
        echo "Available destinations:"
        xcodebuild -scheme JustAMapTests -showdestinations | grep "platform:iOS" || true
        
        # Try to run tests with specific simulator
        echo "Running tests..."
        set -o pipefail
        
        # Try with iPhone 15 first (most likely to be available)
        if xcodebuild test \
          -scheme JustAMapTests \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          -resultBundlePath TestResults \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO 2>&1 | bundle exec xcpretty --report junit --output test_results.xml; then
          echo "Tests completed successfully"
        else
          echo "Failed to run tests with iPhone 15, trying iPhone 14..."
          # Try with iPhone 14 as fallback
          if xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=iOS Simulator,name=iPhone 14" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO 2>&1 | bundle exec xcpretty --report junit --output test_results.xml; then
            echo "Tests completed successfully with iPhone 14"
          else
            echo "Failed to run tests on any simulator"
            exit 1
          fi
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Set default values if empty
          FAILURES="${FAILURES:-0}"
          ERRORS="${ERRORS:-0}"
          
          echo "Test results: $FAILURES failures, $ERRORS errors"
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi