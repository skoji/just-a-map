name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: |
        # List available Xcode installations
        echo "Available Xcode installations:"
        ls -la /Applications/ | grep Xcode || true
        
        # Try to use a specific working version
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.1.app
        else
          # Use whatever is at Xcode.app
          sudo xcode-select -s /Applications/Xcode.app
        fi
        
        echo "Selected Xcode version:"
        xcodebuild -version
        
    - name: Setup iOS Simulator
      run: |
        echo "Checking available simulators and runtimes..."
        
        # List available runtimes
        echo "Available runtimes:"
        xcrun simctl list runtimes
        
        # List available devices
        echo "Available devices:"
        xcrun simctl list devices
        
        # List available device types
        echo "Available device types:"
        xcrun simctl list devicetypes
        
        # Try to find an existing iOS simulator
        EXISTING_DEVICE=$(xcrun simctl list devices | grep -E "iPhone (16|15|14)" | grep -v "unavailable" | head -1 | awk -F'[()]' '{print $2}')
        
        if [ -n "$EXISTING_DEVICE" ]; then
          echo "Found existing device: $EXISTING_DEVICE"
          DEVICE_ID=$EXISTING_DEVICE
        else
          echo "No existing iPhone found, trying to create one..."
          
          # Get the runtime identifier
          RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | grep -v "unavailable" | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Try to create a simulator with available device types
          DEVICE_ID=$(xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "$RUNTIME" 2>/dev/null || \
                      xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "$RUNTIME" 2>/dev/null || \
                      echo "")
        fi
        
        if [ -n "$DEVICE_ID" ]; then
          echo "Using device ID: $DEVICE_ID"
          # Boot the simulator
          xcrun simctl boot "$DEVICE_ID" || true
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
        else
          echo "No simulator available"
          echo "DEVICE_ID=none" >> $GITHUB_ENV
        fi
    
    - name: Run tests
      run: |
        # Show available destinations
        echo "Available destinations:"
        xcodebuild -scheme JustAMapTests -showdestinations || true
        
        set -o pipefail
        
        if [ "$DEVICE_ID" != "none" ]; then
          echo "Running tests on device: $DEVICE_ID"
          
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=iOS Simulator,id=$DEVICE_ID" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | bundle exec xcpretty --report junit --output test_results.xml
        else
          echo "No iOS simulator available, trying alternative approaches..."
          
          # Try with generic platform specification
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "generic/platform=iOS Simulator" \
            -skip-testing-configuration \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | bundle exec xcpretty --report junit --output test_results.xml || {
            
            echo "iOS Simulator test failed, trying Mac Catalyst..."
            # Last resort: Mac Catalyst
            xcodebuild test \
              -scheme JustAMapTests \
              -destination "platform=macOS,variant=Mac Catalyst" \
              -resultBundlePath TestResults \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              | bundle exec xcpretty --report junit --output test_results.xml || {
              echo "All test attempts failed"
              echo "Consider using self-hosted runners or Xcode Cloud"
              exit 1
            }
          }
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Set default values if empty
          FAILURES="${FAILURES:-0}"
          ERRORS="${ERRORS:-0}"
          
          echo "Test results: $FAILURES failures, $ERRORS errors"
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi