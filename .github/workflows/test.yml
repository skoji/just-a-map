name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.2.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: List available simulators
      run: xcrun simctl list devices
    
    - name: Prepare and run tests
      run: |
        # Show available simulators for debugging
        echo "Available simulators:"
        xcrun simctl list devices
        
        # Find first available iPhone simulator ID from the list
        SIMULATOR_ID=$(xcrun simctl list devices available | grep -E "iPhone (16|15|14|13)" | grep -v "unavailable" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' || echo "")
        
        if [ -n "$SIMULATOR_ID" ]; then
          echo "Found simulator ID: $SIMULATOR_ID"
          # Boot the simulator if needed
          xcrun simctl boot "$SIMULATOR_ID" || true
          
          # Run tests with the specific simulator ID
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | bundle exec xcpretty --report junit --output test_results.xml
        else
          echo "No simulator ID found, trying with name-based destination"
          # Fallback to name-based destination
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=iOS Simulator,name=iPhone 15" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | bundle exec xcpretty --report junit --output test_results.xml
        fi
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Set default values if empty
          FAILURES="${FAILURES:-0}"
          ERRORS="${ERRORS:-0}"
          
          echo "Test results: $FAILURES failures, $ERRORS errors"
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi