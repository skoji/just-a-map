name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: |
        # List available Xcode versions
        ls -la /Applications/ | grep Xcode || true
        # Use Xcode 15.4 which is known to work well with iOS simulators
        sudo xcode-select -s /Applications/Xcode_15.4.app || sudo xcode-select -s /Applications/Xcode_15.2.app || sudo xcode-select -s /Applications/Xcode_15.0.1.app
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: Setup iOS Simulator
      run: |
        # List available runtimes
        xcrun simctl list runtimes
        
        # List available devices
        xcrun simctl list devices
        
        # Create a new simulator if needed
        DEVICE_ID=$(xcrun simctl create "Test iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" "com.apple.CoreSimulator.SimRuntime.iOS-17-5" 2>/dev/null || \
                    xcrun simctl create "Test iPhone" "iPhone 14" 2>/dev/null || \
                    echo "")
        
        if [ -n "$DEVICE_ID" ]; then
          echo "Created device: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
        else
          echo "Using default simulator"
          echo "DEVICE_ID=default" >> $GITHUB_ENV
        fi
    
    - name: Run tests
      run: |
        # Show available destinations for debugging
        echo "Available destinations:"
        xcodebuild -scheme JustAMapTests -showdestinations | grep "platform:iOS" || true
        
        # Try to run tests
        echo "Running tests..."
        set -o pipefail
        
        if [ "$DEVICE_ID" != "default" ]; then
          echo "Using created device: $DEVICE_ID"
          # Boot the device
          xcrun simctl boot "$DEVICE_ID" || true
          
          # Run tests with the created device
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=iOS Simulator,id=$DEVICE_ID" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO 2>&1 | bundle exec xcpretty --report junit --output test_results.xml
        else
          echo "Trying with generic iOS simulator..."
          # Try Mac Catalyst as a last resort since iOS simulators aren't working
          xcodebuild test \
            -scheme JustAMapTests \
            -destination "platform=macOS,variant=Mac Catalyst" \
            -resultBundlePath TestResults \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO 2>&1 | bundle exec xcpretty --report junit --output test_results.xml || {
            echo "All test attempts failed"
            echo "This might be a known issue with GitHub Actions macOS runners"
            echo "Consider running tests on Mac Catalyst or using a self-hosted runner"
            exit 1
          }
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Set default values if empty
          FAILURES="${FAILURES:-0}"
          ERRORS="${ERRORS:-0}"
          
          echo "Test results: $FAILURES failures, $ERRORS errors"
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi