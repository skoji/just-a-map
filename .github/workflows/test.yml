name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test on iOS Simulator
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Select Xcode version
      run: |
        # List available Xcode installations
        echo "Available Xcode installations:"
        ls -la /Applications/ | grep Xcode || true
        
        # Try to use a specific working version
        if [ -d "/Applications/Xcode_16.0.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.0.app
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          sudo xcode-select -s /Applications/Xcode_16.1.app
        else
          # Use whatever is at Xcode.app
          sudo xcode-select -s /Applications/Xcode.app
        fi
        
        echo "Selected Xcode version:"
        xcodebuild -version
        
    - name: Check available destinations
      run: |
        echo "Checking available test destinations..."
        xcodebuild -scheme JustAMapTests -showdestinations
    
    - name: Run tests
      run: |
        echo "Running tests with Mac Catalyst..."
        echo "Note: iOS Simulator is not properly available on GitHub Actions runners"
        echo "Using Mac Catalyst as it's the most reliable option for CI"
        
        set -o pipefail
        
        xcodebuild test \
          -scheme JustAMapTests \
          -destination "platform=macOS,variant=Mac Catalyst" \
          -resultBundlePath TestResults \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | bundle exec xcpretty --report junit --output test_results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test_results.xml
          TestResults/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: always()
      with:
        files: test_results.xml
        check_name: iOS Test Results
    
    - name: Check test status
      run: |
        if [ -f test_results.xml ]; then
          # Parse test results to check for failures
          FAILURES=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' test_results.xml | grep -o '[0-9]*' | head -1 || echo "0")
          
          # Set default values if empty
          FAILURES="${FAILURES:-0}"
          ERRORS="${ERRORS:-0}"
          
          echo "Test results: $FAILURES failures, $ERRORS errors"
          
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "Tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi
        else
          echo "Test results file not found"
          exit 1
        fi